/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.softencity.imageqsort;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Artur
 */
public class SorterPanel extends javax.swing.JFrame {

    private static final Pattern numPattern = Pattern.compile("\\d");
    private QSortSetup setup = new QSortSetup();
    private List<JLabel> categoryLabels = new ArrayList<>();
    private List<JLabel> categoryIcons = new ArrayList<>();

    /**
     * Creates new form SorterPanel
     */
    public SorterPanel() {
        initComponents();

        loadSourceImages();
        loadCategories();

        showImage();
        showCategories();
    }

    private void nextImage() {
        setup.currentImageNo++;
        showImage();
    }

    public final void showImage() {
        try {
            BufferedImage myPicture = ImageIO.read(setup.sourceFiles.get(setup.currentImageNo));
            sourceImage.setIcon(new ImageIcon(myPicture));
        } catch (IOException ex) {
            Logger.getLogger(SorterPanel.class.getName()).log(Level.SEVERE, "Could not load image... sorry", ex);
        }
    }

    private void loadSourceImages() {
        File sourceDir = new File(setup.sourceDir);
        setup.sourceFiles.addAll(Arrays.asList(sourceDir.listFiles()));
    }

    private void loadCategories() {
        File categoryDir = new File(setup.categoriesDir);
        setup.categoryDirs.addAll(Arrays.asList(categoryDir.listFiles()));
    }

    private void showCategories() {
        for (int i = 0; i < setup.categoryDirs.size(); i++) {
            addCategory(i, setup.categoryDirs.get(i));
        }
    }

    private void addCategory(int index, File categoryDir) {
        JLabel categoryLabel = new JLabel("" + index + ":" + categoryDir.getName());
        categoryLabel.setText("" + index + ":" + categoryDir.getName());
        categoryLabel.setLocation(index * setup.labelWidth + 80, 30);
        categoryLabel.setVisible(true);
        categoryLabel.setSize(setup.labelWidth, 30);

        JLabel categoryIcon = new JLabel("" + index + ":" + categoryDir.getName());
        categoryIcon.setText("");
        categoryIcon.setLocation(index * setup.labelWidth + 40, 70);
        categoryIcon.setVisible(true);
        categoryIcon.setSize(130, 100);

        sortedImagesPanel.add(categoryLabel);
        sortedImagesPanel.add(categoryIcon);
        categoryLabels.add(categoryLabel);
        categoryIcons.add(categoryIcon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceImage = new javax.swing.JLabel();
        sortedImagesPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        sourceImage.setText("sourceImage");
        sourceImage.setName("sourceImage"); // NOI18N

        sortedImagesPanel.setName("sortedImagesPanel"); // NOI18N

        javax.swing.GroupLayout sortedImagesPanelLayout = new javax.swing.GroupLayout(sortedImagesPanel);
        sortedImagesPanel.setLayout(sortedImagesPanelLayout);
        sortedImagesPanelLayout.setHorizontalGroup(
            sortedImagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        sortedImagesPanelLayout.setVerticalGroup(
            sortedImagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(241, 241, 241)
                .addComponent(sourceImage, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(293, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(sortedImagesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(sortedImagesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(sourceImage, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        String c = "" + evt.getKeyChar();

        if (numPattern.matcher(c).matches()) {
            int index = Integer.parseInt(c);
            if (index < setup.categoryDirs.size()) {
                File categoryDir = setup.categoryDirs.get(index);
                File sourceFile = setup.sourceFiles.get(setup.currentImageNo);
                try {
                    BufferedImage myPicture = ImageIO.read(sourceFile);
                    categoryIcons.get(index).setIcon(new ImageIcon(myPicture));
                    
                    FileUtils.moveFile(sourceFile, new File(categoryDir, sourceFile.getName()));
                    
                    nextImage();
                } catch (IOException ex) {
                    Logger.getLogger(SorterPanel.class.getName()).log(Level.SEVERE, "Could not load image... sorry", ex);
                }                
            }
        }
    }//GEN-LAST:event_formKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel sortedImagesPanel;
    private javax.swing.JLabel sourceImage;
    // End of variables declaration//GEN-END:variables
}
